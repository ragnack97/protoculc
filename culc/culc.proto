syntax = "proto3";
package auth;

option go_package = "github.com/ragnack97/protoculc/protoc/culc";
import "google/api/annotations.proto";

service Auth {
    rpc Register(RegisterReq) returns (RegisterRes){
        option (google.api.http) = {
            post: "/register"
            body: "*"
        };
    }
    rpc Login(LoginReq) returns (LoginRes){
        option (google.api.http) = {
            post: "/login"
            body: "*"
        };
    }

    rpc Calculate(CalculateReq) returns (CalculateRes){
        option (google.api.http) = {
            post: "/culc"
            body: "*"
        };
    }
    rpc NewClient(ClientReq) returns (ClientRes){
        option (google.api.http) = {
            post: "/newclient"
            body: "*"
        };
    }
    rpc StreamServerStatuses(StreamServerStatusesRequest) returns ( StreamServerStatusesResponse) {
        option (google.api.http) = {
            get: "/allclient"
            
        };
    }
    rpc GetHistoryEx(HistoryReq) returns (HistoryRes){
        option (google.api.http) = {
            get: "/history"
            
        };
    }
    rpc UpdateConfig (ConfigReq) returns (ConfigRes){
        option (google.api.http) = {
            post: "/config"
            body: "*"
        };
    }

}
message ConfigReq {
    int64 Plus =1;
    int64 Minus = 2;
    int64 MultP = 3;
    int64 Div = 4;
    int64 Exponent =5;
}
message ConfigRes {
    
}
message HistoryReq {
    
}


message HistoryRes {
    repeated Expression expressions = 1; 
}


message Expression {
    int32 id = 1; 
    string expres = 2;  

}
message StreamServerStatusesRequest {
    
}
message StreamServerStatusesResponse {
    repeated ServerStatus statuses = 1;
}
message ServerStatus {
    string server_id = 1; 
    int32 active = 2;  
    int32 all = 3;  
}
message CalculateReq {
    string expression = 1;
}
message ClientReq {
    int64 countworker = 1;

}
message ClientRes {
    string res = 1;
}
message CalculateRes {
    string result = 1;
}
message RegisterReq {
    string email = 1;
    string password = 2;
}
message RegisterRes {
   int64 user_id = 1;
}
message LoginReq {
    string email = 1;
    string password = 2;
    
}
message LoginRes {
    string token = 1;
}
